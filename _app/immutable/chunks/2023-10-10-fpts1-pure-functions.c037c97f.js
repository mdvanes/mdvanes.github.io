import{S as Ua,i as za,s as Ka,k as i,q as o,a as c,_ as Ga,l,m as r,r as p,h as s,c as u,$ as $a,n as b,b as n,F as a,G as Vs}from"./index.f054af2f.js";function Na(Ma){let v,$e,de,C,Ne,he,O,Qe,ke,A,Ve,ye,w,Q,Xe,Ye,V,Ze,be,H,es,ve,L,ss,we,R,as,_e,B,ts,Ee,T,Ia='<code class="language-typescript"><span class="token keyword">const</span> addRandom <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> x <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',xe,d,ns,X,os,ps,Y,is,ls,Pe,g,Da=`<code class="language-typescript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>z <span class="token operator">=</span> sum<span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Te,h,rs,Z,cs,us,ee,ms,fs,ge,S,Ca='<code class="language-typescript"><span class="token keyword">const</span> simpleAdd <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></code>',Se,_,ds,se,hs,ks,Fe,j,ys,Me,q,bs,Ie,W,vs,De,ae,Oa='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">f(x) = 2x ^2 + 4x + 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></span>',te,J,ws,Ce,F,Aa='<code class="language-ts"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span></code>',Oe,m,_s,ne,Es,xs,oe,Ps,Ts,pe,gs,Ss,ie,Fs,Ms,Ae,U,Is,He,f,Ds,le,Cs,Os,re,As,Hs,ce,Ls,Rs,Le,M,Ha='<code class="language-ts"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> pow<span class="token operator">:</span> <span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>pow<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span></code>',Re,z,Bs,Be,E,js,ue,qs,Ws,je,I,La=`<code class="language-ts"><span class="token keyword">const</span> simpleAdd <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">const</span> addRandom <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token function">simpleAdd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,qe,K,Js,We,x,Us,G,zs,Ks,Je,y,me,Gs,$s,D,Ns,Qs;return{c(){v=i("p"),$e=o("If you have made the concious decision to prefer TypeScript over JavaScript, you were probably convinced by its promise to reduce runtime errors. Without knowing anything about Functional Programming (FP from now on), it fulfills the same role. That’s why FP and TS go hand in hand, in my opinion."),de=c(),C=i("p"),Ne=o("This should become a series of articles, where each article dives deeper into FP paradigms. But we start with two core concepts, pure functions & immutability. These concepts, even by themselves, will promote cleaner coding and can be applied in any TypeScript project without libraries. More advanced concepts of FP are build on these principles, and that makes them a great place to start."),he=c(),O=i("h2"),Qe=o("Pure functions"),ke=c(),A=i("p"),Ve=o("A pure function is a function that:"),ye=c(),w=i("ul"),Q=i("li"),Xe=o("is deterministic"),Ye=c(),V=i("li"),Ze=o("has no side effects"),be=c(),H=i("p"),es=o("Determinism means that for the same arguments, the function always returns the same output. It is predictable and stable."),ve=c(),L=i("p"),ss=o("With side effects, we mean that nothing outside the scope of the function is modified. UI code relies heavily on side effects, since rendering anything is outside the scope of a function. Manipulating the DOM, but also logging to the console, or mutating global variables are all examples of side effects."),we=c(),R=i("p"),as=o("Pure functions help prevent runtime errors because they are transparent and therefore easy to comprehend. When pure functions are written with conciseness and high cohesion in mind, they can improve readability. They are also easy to write tests for, because there is no environment to set up, you just have to supply the correct arguments."),_e=c(),B=i("p"),ts=o("Some examples:"),Ee=c(),T=i("pre"),xe=c(),d=i("p"),ns=o("The function "),X=i("code"),os=o("addRandom"),ps=o(" is not pure, because it is non-deterministic. Because of the random function, it possibly returns a different output for the same value of the argument "),Y=i("code"),is=o("x"),ls=o("."),Pe=c(),g=i("pre"),Te=c(),h=i("p"),rs=o("The function "),Z=i("code"),cs=o("add"),us=o(" is not pure, because although it is deterministic, it can have side effects by modifying the global variable "),ee=i("code"),ms=o("window"),fs=o("."),ge=c(),S=i("pre"),Se=c(),_=i("p"),ds=o("The function "),se=i("code"),hs=o("simpleAdd"),ks=o(" is pure, because it is deterministic and has no side effects."),Fe=c(),j=i("h2"),ys=o("Mathematics"),Me=c(),q=i("p"),bs=o("FP lends a lot of its power from mathematics. Pure functions can be proven mathematically. If a lot of your code is mathematically provable, you have less code to test empirically."),Ie=c(),W=i("p"),vs=o("Compare the mathematical equation:"),De=c(),ae=new Ga(!1),te=c(),J=i("p"),ws=o("to the function:"),Ce=c(),F=i("pre"),Oe=c(),m=i("p"),_s=o("Both describe the same cubic polynomial expression called "),ne=i("code"),Es=o("f"),xs=o(" that takes an argument "),oe=i("code"),Ps=o("x"),Ts=o(" and apply basic arithmetic operations on "),pe=i("code"),gs=o("x"),Ss=o(". There are no side effects (or are there?), and the result is deterministic. Because they can be mathematically proven, we know that "),ie=i("code"),Fs=o("f"),Ms=o(" can be solved by the quadratic formula, there is no reason to write unit tests to figure that out!"),Ae=c(),U=i("h2"),Is=o("The scale of purity"),He=c(),f=i("p"),Ds=o("Unfortunately, a function is not just “pure” or “not pure”. Since output of any kind can be considered as side effects, it would not be useful to have a program of only completely pure functions. It’s more practical to see a function as “more pure” or “less pure”. To give an extreme example, look at the function "),le=i("code"),Cs=o("f"),Os=o(" from the previous previous paragraph. Practically speaking, I would consider this quite pure. But you could argue that "),re=i("code"),As=o("Math"),Hs=o(" is a global and could be overridden between calls of "),ce=i("code"),Ls=o("f"),Rs=o(". To make that function more pure by writing it like this:"),Le=c(),M=i("pre"),Re=c(),z=i("p"),Bs=o("To my taste, that’s just a tad impractical."),Be=c(),E=i("p"),js=o("In general, it’s a good idea to isolate pure functions from functions you know to be not pure. For example, sometimes you actually want to have a random function, like in "),ue=i("code"),qs=o("addRandom"),Ws=o(" and you could deal with this by separating the pure part and the not pure part into separate functions:"),je=c(),I=i("pre"),qe=c(),K=i("p"),Js=o("This way the undeterministic lines of code are limited to the absolute minimum."),We=c(),x=i("p"),Us=o("Another good way to limit side effects is by employing immutability, which will be the topic of the "),G=i("a"),zs=o("next chapter"),Ks=o("."),Je=c(),y=i("p"),me=i("em"),Gs=o("Acknowledgement:"),$s=o(" this article was inspired by the course "),D=i("a"),Ns=o("Functional-Light JavaScript, v3 by Kyle Simpson"),Qs=o("."),this.h()},l(e){v=l(e,"P",{});var t=r(v);$e=p(t,"If you have made the concious decision to prefer TypeScript over JavaScript, you were probably convinced by its promise to reduce runtime errors. Without knowing anything about Functional Programming (FP from now on), it fulfills the same role. That’s why FP and TS go hand in hand, in my opinion."),t.forEach(s),de=u(e),C=l(e,"P",{});var Xs=r(C);Ne=p(Xs,"This should become a series of articles, where each article dives deeper into FP paradigms. But we start with two core concepts, pure functions & immutability. These concepts, even by themselves, will promote cleaner coding and can be applied in any TypeScript project without libraries. More advanced concepts of FP are build on these principles, and that makes them a great place to start."),Xs.forEach(s),he=u(e),O=l(e,"H2",{});var Ys=r(O);Qe=p(Ys,"Pure functions"),Ys.forEach(s),ke=u(e),A=l(e,"P",{});var Zs=r(A);Ve=p(Zs,"A pure function is a function that:"),Zs.forEach(s),ye=u(e),w=l(e,"UL",{});var Ue=r(w);Q=l(Ue,"LI",{});var ea=r(Q);Xe=p(ea,"is deterministic"),ea.forEach(s),Ye=u(Ue),V=l(Ue,"LI",{});var sa=r(V);Ze=p(sa,"has no side effects"),sa.forEach(s),Ue.forEach(s),be=u(e),H=l(e,"P",{});var aa=r(H);es=p(aa,"Determinism means that for the same arguments, the function always returns the same output. It is predictable and stable."),aa.forEach(s),ve=u(e),L=l(e,"P",{});var ta=r(L);ss=p(ta,"With side effects, we mean that nothing outside the scope of the function is modified. UI code relies heavily on side effects, since rendering anything is outside the scope of a function. Manipulating the DOM, but also logging to the console, or mutating global variables are all examples of side effects."),ta.forEach(s),we=u(e),R=l(e,"P",{});var na=r(R);as=p(na,"Pure functions help prevent runtime errors because they are transparent and therefore easy to comprehend. When pure functions are written with conciseness and high cohesion in mind, they can improve readability. They are also easy to write tests for, because there is no environment to set up, you just have to supply the correct arguments."),na.forEach(s),_e=u(e),B=l(e,"P",{});var oa=r(B);ts=p(oa,"Some examples:"),oa.forEach(s),Ee=u(e),T=l(e,"PRE",{class:!0});var Ra=r(T);Ra.forEach(s),xe=u(e),d=l(e,"P",{});var $=r(d);ns=p($,"The function "),X=l($,"CODE",{});var pa=r(X);os=p(pa,"addRandom"),pa.forEach(s),ps=p($," is not pure, because it is non-deterministic. Because of the random function, it possibly returns a different output for the same value of the argument "),Y=l($,"CODE",{});var ia=r(Y);is=p(ia,"x"),ia.forEach(s),ls=p($,"."),$.forEach(s),Pe=u(e),g=l(e,"PRE",{class:!0});var Ba=r(g);Ba.forEach(s),Te=u(e),h=l(e,"P",{});var N=r(h);rs=p(N,"The function "),Z=l(N,"CODE",{});var la=r(Z);cs=p(la,"add"),la.forEach(s),us=p(N," is not pure, because although it is deterministic, it can have side effects by modifying the global variable "),ee=l(N,"CODE",{});var ra=r(ee);ms=p(ra,"window"),ra.forEach(s),fs=p(N,"."),N.forEach(s),ge=u(e),S=l(e,"PRE",{class:!0});var ja=r(S);ja.forEach(s),Se=u(e),_=l(e,"P",{});var ze=r(_);ds=p(ze,"The function "),se=l(ze,"CODE",{});var ca=r(se);hs=p(ca,"simpleAdd"),ca.forEach(s),ks=p(ze," is pure, because it is deterministic and has no side effects."),ze.forEach(s),Fe=u(e),j=l(e,"H2",{});var ua=r(j);ys=p(ua,"Mathematics"),ua.forEach(s),Me=u(e),q=l(e,"P",{});var ma=r(q);bs=p(ma,"FP lends a lot of its power from mathematics. Pure functions can be proven mathematically. If a lot of your code is mathematically provable, you have less code to test empirically."),ma.forEach(s),Ie=u(e),W=l(e,"P",{});var fa=r(W);vs=p(fa,"Compare the mathematical equation:"),fa.forEach(s),De=u(e),ae=$a(e,!1),te=u(e),J=l(e,"P",{});var da=r(J);ws=p(da,"to the function:"),da.forEach(s),Ce=u(e),F=l(e,"PRE",{class:!0});var qa=r(F);qa.forEach(s),Oe=u(e),m=l(e,"P",{});var k=r(m);_s=p(k,"Both describe the same cubic polynomial expression called "),ne=l(k,"CODE",{});var ha=r(ne);Es=p(ha,"f"),ha.forEach(s),xs=p(k," that takes an argument "),oe=l(k,"CODE",{});var ka=r(oe);Ps=p(ka,"x"),ka.forEach(s),Ts=p(k," and apply basic arithmetic operations on "),pe=l(k,"CODE",{});var ya=r(pe);gs=p(ya,"x"),ya.forEach(s),Ss=p(k,". There are no side effects (or are there?), and the result is deterministic. Because they can be mathematically proven, we know that "),ie=l(k,"CODE",{});var ba=r(ie);Fs=p(ba,"f"),ba.forEach(s),Ms=p(k," can be solved by the quadratic formula, there is no reason to write unit tests to figure that out!"),k.forEach(s),Ae=u(e),U=l(e,"H2",{});var va=r(U);Is=p(va,"The scale of purity"),va.forEach(s),He=u(e),f=l(e,"P",{});var P=r(f);Ds=p(P,"Unfortunately, a function is not just “pure” or “not pure”. Since output of any kind can be considered as side effects, it would not be useful to have a program of only completely pure functions. It’s more practical to see a function as “more pure” or “less pure”. To give an extreme example, look at the function "),le=l(P,"CODE",{});var wa=r(le);Cs=p(wa,"f"),wa.forEach(s),Os=p(P," from the previous previous paragraph. Practically speaking, I would consider this quite pure. But you could argue that "),re=l(P,"CODE",{});var _a=r(re);As=p(_a,"Math"),_a.forEach(s),Hs=p(P," is a global and could be overridden between calls of "),ce=l(P,"CODE",{});var Ea=r(ce);Ls=p(Ea,"f"),Ea.forEach(s),Rs=p(P,". To make that function more pure by writing it like this:"),P.forEach(s),Le=u(e),M=l(e,"PRE",{class:!0});var Wa=r(M);Wa.forEach(s),Re=u(e),z=l(e,"P",{});var xa=r(z);Bs=p(xa,"To my taste, that’s just a tad impractical."),xa.forEach(s),Be=u(e),E=l(e,"P",{});var Ke=r(E);js=p(Ke,"In general, it’s a good idea to isolate pure functions from functions you know to be not pure. For example, sometimes you actually want to have a random function, like in "),ue=l(Ke,"CODE",{});var Pa=r(ue);qs=p(Pa,"addRandom"),Pa.forEach(s),Ws=p(Ke," and you could deal with this by separating the pure part and the not pure part into separate functions:"),Ke.forEach(s),je=u(e),I=l(e,"PRE",{class:!0});var Ja=r(I);Ja.forEach(s),qe=u(e),K=l(e,"P",{});var Ta=r(K);Js=p(Ta,"This way the undeterministic lines of code are limited to the absolute minimum."),Ta.forEach(s),We=u(e),x=l(e,"P",{});var Ge=r(x);Us=p(Ge,"Another good way to limit side effects is by employing immutability, which will be the topic of the "),G=l(Ge,"A",{href:!0});var ga=r(G);zs=p(ga,"next chapter"),ga.forEach(s),Ks=p(Ge,"."),Ge.forEach(s),Je=u(e),y=l(e,"P",{});var fe=r(y);me=l(fe,"EM",{});var Sa=r(me);Gs=p(Sa,"Acknowledgement:"),Sa.forEach(s),$s=p(fe," this article was inspired by the course "),D=l(fe,"A",{href:!0,rel:!0});var Fa=r(D);Ns=p(Fa,"Functional-Light JavaScript, v3 by Kyle Simpson"),Fa.forEach(s),Qs=p(fe,"."),fe.forEach(s),this.h()},h(){b(T,"class","language-typescript"),b(g,"class","language-typescript"),b(S,"class","language-typescript"),ae.a=te,b(F,"class","language-ts"),b(M,"class","language-ts"),b(I,"class","language-ts"),b(G,"href","./fpts2-immutability"),b(D,"href","https://frontendmasters.com/courses/functional-javascript-v3/"),b(D,"rel","nofollow")},m(e,t){n(e,v,t),a(v,$e),n(e,de,t),n(e,C,t),a(C,Ne),n(e,he,t),n(e,O,t),a(O,Qe),n(e,ke,t),n(e,A,t),a(A,Ve),n(e,ye,t),n(e,w,t),a(w,Q),a(Q,Xe),a(w,Ye),a(w,V),a(V,Ze),n(e,be,t),n(e,H,t),a(H,es),n(e,ve,t),n(e,L,t),a(L,ss),n(e,we,t),n(e,R,t),a(R,as),n(e,_e,t),n(e,B,t),a(B,ts),n(e,Ee,t),n(e,T,t),T.innerHTML=Ia,n(e,xe,t),n(e,d,t),a(d,ns),a(d,X),a(X,os),a(d,ps),a(d,Y),a(Y,is),a(d,ls),n(e,Pe,t),n(e,g,t),g.innerHTML=Da,n(e,Te,t),n(e,h,t),a(h,rs),a(h,Z),a(Z,cs),a(h,us),a(h,ee),a(ee,ms),a(h,fs),n(e,ge,t),n(e,S,t),S.innerHTML=Ca,n(e,Se,t),n(e,_,t),a(_,ds),a(_,se),a(se,hs),a(_,ks),n(e,Fe,t),n(e,j,t),a(j,ys),n(e,Me,t),n(e,q,t),a(q,bs),n(e,Ie,t),n(e,W,t),a(W,vs),n(e,De,t),ae.m(Oa,e,t),n(e,te,t),n(e,J,t),a(J,ws),n(e,Ce,t),n(e,F,t),F.innerHTML=Aa,n(e,Oe,t),n(e,m,t),a(m,_s),a(m,ne),a(ne,Es),a(m,xs),a(m,oe),a(oe,Ps),a(m,Ts),a(m,pe),a(pe,gs),a(m,Ss),a(m,ie),a(ie,Fs),a(m,Ms),n(e,Ae,t),n(e,U,t),a(U,Is),n(e,He,t),n(e,f,t),a(f,Ds),a(f,le),a(le,Cs),a(f,Os),a(f,re),a(re,As),a(f,Hs),a(f,ce),a(ce,Ls),a(f,Rs),n(e,Le,t),n(e,M,t),M.innerHTML=Ha,n(e,Re,t),n(e,z,t),a(z,Bs),n(e,Be,t),n(e,E,t),a(E,js),a(E,ue),a(ue,qs),a(E,Ws),n(e,je,t),n(e,I,t),I.innerHTML=La,n(e,qe,t),n(e,K,t),a(K,Js),n(e,We,t),n(e,x,t),a(x,Us),a(x,G),a(G,zs),a(x,Ks),n(e,Je,t),n(e,y,t),a(y,me),a(me,Gs),a(y,$s),a(y,D),a(D,Ns),a(y,Qs)},p:Vs,i:Vs,o:Vs,d(e){e&&s(v),e&&s(de),e&&s(C),e&&s(he),e&&s(O),e&&s(ke),e&&s(A),e&&s(ye),e&&s(w),e&&s(be),e&&s(H),e&&s(ve),e&&s(L),e&&s(we),e&&s(R),e&&s(_e),e&&s(B),e&&s(Ee),e&&s(T),e&&s(xe),e&&s(d),e&&s(Pe),e&&s(g),e&&s(Te),e&&s(h),e&&s(ge),e&&s(S),e&&s(Se),e&&s(_),e&&s(Fe),e&&s(j),e&&s(Me),e&&s(q),e&&s(Ie),e&&s(W),e&&s(De),e&&ae.d(),e&&s(te),e&&s(J),e&&s(Ce),e&&s(F),e&&s(Oe),e&&s(m),e&&s(Ae),e&&s(U),e&&s(He),e&&s(f),e&&s(Le),e&&s(M),e&&s(Re),e&&s(z),e&&s(Be),e&&s(E),e&&s(je),e&&s(I),e&&s(qe),e&&s(K),e&&s(We),e&&s(x),e&&s(Je),e&&s(y)}}}const Va={title:"FP & TS chapter 1: Functional Programming for TypeScript developers",cover:"",date:"10-10-2023",category:"webdevelopment",tags:["webdevelopment","FP & TS"],preview:"If you have made the concious decision to prefer TypeScript over JavaScript, you were probably convinced by its promise to reduce runtime errors. Without knowing anything about Functional Programming (FP from now on), it fulfills the same role.",previewHtml:"<p>If you have made the concious decision to prefer TypeScript over JavaScript, you were probably convinced by its promise to reduce runtime errors. Without knowing anything about Functional Programming (FP from now on), it fulfills the same role. That’...</p>"};class Xa extends Ua{constructor(v){super(),za(this,v,null,Na,Ka,{})}}export{Xa as default,Va as metadata};
