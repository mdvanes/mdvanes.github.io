import{S as ne,i as ee,s as oe,k as o,q as n,a as i,l as p,m as l,r as e,h as t,c as u,n as f,b as c,F as a,G as Qt}from"./index.f054af2f.js";function pe(Bn){let I,ua,gs,K,da,Ss,g,Jn=`<code class="language-typescript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>z <span class="token operator">=</span> sum<span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,As,Y,ka,Ls,S,Nn=`<code class="language-typescript"><span class="token keyword">const</span> heroes<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dent'</span><span class="token punctuation">,</span> <span class="token string">'Prefect'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">addHero</span> <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">addHero</span><span class="token punctuation">(</span><span class="token string">'Marvin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,zs,d,fa,ts,ha,ma,ns,ya,wa,es,va,ba,os,Ea,_a,ps,Ta,Ia,ls,Ha,xa,rs,Ma,Oa,cs,Da,ja,is,Ca,Pa,us,ga,Sa,Rs,H,Aa,ds,La,za,Fs,A,Gn=`<code class="language-typescript"><span class="token keyword">const</span> heroes<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dent'</span><span class="token punctuation">,</span> <span class="token string">'Prefect'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">addHero</span> <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TS2339 property 'push' does not exist on type 'readonly string[]'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">addHero</span><span class="token punctuation">(</span><span class="token string">'Marvin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Bs,U,Ra,Js,b,Fa,ks,Ba,Ja,fs,Na,Ga,Ns,L,Wn=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Heroes</span> <span class="token operator">=</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> heroes<span class="token operator">:</span> Heroes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dent'</span><span class="token punctuation">,</span> <span class="token string">'Prefect'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">addHero</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hs<span class="token operator">:</span> Heroes<span class="token punctuation">,</span> h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>hs<span class="token punctuation">,</span> h<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newHeroes<span class="token operator">:</span> Heroes <span class="token operator">=</span> <span class="token function">addHero</span><span class="token punctuation">(</span>heroes<span class="token punctuation">,</span> <span class="token string">'Marvin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Gs,E,Wa,hs,qa,Ka,ms,Ya,Ua,Ws,z,qn=`<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Hero</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> dent<span class="token operator">:</span> Hero <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Dent'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">updateName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> Hero<span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// h.name = n; // TS2540 cannot assign to 'name' because it is a read-only property</span>
  <span class="token comment">// return h;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>h<span class="token punctuation">,</span>
    name<span class="token operator">:</span> n
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newDent <span class="token operator">=</span> <span class="token function">updateName</span><span class="token punctuation">(</span>dent<span class="token punctuation">,</span> <span class="token string">'Arthur'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,qs,Q,Qa,Ks,h,Va,ys,Xa,Za,ws,$a,st,vs,at,tt,bs,nt,et,Ys,R,Kn=`<code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">addHeroToStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hs<span class="token operator">:</span> Heroes<span class="token punctuation">,</span> h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Instead of: hs.unshift(h); return hs;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>h<span class="token punctuation">,</span> <span class="token operator">...</span>hs<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">lastHero</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hs<span class="token operator">:</span> Heroes<span class="token punctuation">,</span> h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Instead of: return hs.pop();</span>
  <span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">firstHero</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hs<span class="token operator">:</span> Heroes<span class="token punctuation">,</span> h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Instead of: return hs.shift();</span>
  <span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Us,m,ot,Es,pt,lt,_s,rt,ct,Ts,it,ut,Qs,F,Yn=`<code class="language-ts"><span class="token comment">// mutating method:</span>
hs<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> hs<span class="token punctuation">;</span>
<span class="token comment">// copying method:</span>
<span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Vs,V,dt,Xs,y,kt,Is,ft,ht,Hs,mt,yt,xs,wt,vt,Zs,x,bt,B,Et,_t,$s,X,Tt,sa,M,It,J,Ht,xt,aa,w,Mt,N,Ot,Dt,G,jt,Ct,Ms,Pt,gt,ta,W,Un=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> produce <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'immer'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token punctuation">(</span>draft<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  draft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  draft<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Tweet about it'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,na,v,St,Os,At,Lt,Ds,zt,Rt,js,Ft,Bt,ea,Z,Jt,oa,O,Nt,$,Gt,Wt,pa,T,Cs,qt,Kt,q,Yt,Ut;return{c(){I=o("p"),ua=n("The previous article explained what side effects are and why it is important to prevent them and to write pure functions."),gs=i(),K=o("p"),da=n("The example of a function with a side effect was:"),Ss=i(),g=o("pre"),As=i(),Y=o("p"),ka=n("Let’s look at a similar example, but without the global window variable. Instead, an array that is declared outside the function is updated:"),Ls=i(),S=o("pre"),zs=i(),d=o("p"),fa=n("Although the "),ts=o("code"),ha=n("heroes"),ma=n(" array is declared with "),ns=o("code"),ya=n("const"),wa=n(", that just means that it can’t be reassigned, e.g. with "),es=o("code"),va=n("heroes = []"),ba=n(". In fact, the array itself can still be "),os=o("em"),Ea=n("mutated"),_a=n(". This is the default behavior for data structures in JavaScript. That is why "),ps=o("code"),Ta=n("addHero"),Ia=n(" causes a side-effect, it mutates the "),ls=o("code"),Ha=n("heroes"),xa=n(" array that was declared outside the scope of the function, so when the "),rs=o("code"),Ma=n("heroes"),Oa=n(" array is accessed after calling "),cs=o("code"),Da=n("addHero"),ja=n(", it "),is=o("em"),Ca=n("will"),Pa=n(" contain the value "),us=o("code"),ga=n("Marvin"),Sa=n("."),Rs=i(),H=o("p"),Aa=n("Typescript offers the "),ds=o("code"),La=n("readonly"),za=n(" modifier to make the compiler prevent calling mutating methods on a data structure:"),Fs=i(),A=o("pre"),Bs=i(),U=o("h2"),Ra=n("Copying instead of mutating"),Js=i(),b=o("p"),Fa=n("Instead you should create a new array and return that inside of "),ks=o("code"),Ba=n("addHero"),Ja=n(". You could create an intermediary array in "),fs=o("code"),Na=n("addHero"),Ga=n(" and push to it, and then return it. In functional style you would do this without an intermediary variable. TypeScript has a very readable way to do this, with the spread operator:"),Ns=i(),L=o("pre"),Gs=i(),E=o("p"),Wa=n("This copies the values of the "),hs=o("code"),qa=n("heroes"),Ka=n(" array and the new value to a new array, preventing side effects on the "),ms=o("code"),Ya=n("heroes"),Ua=n(" array. This also applies to objects:"),Ws=i(),z=o("pre"),qs=i(),Q=o("h2"),Qa=n("Mutating methods"),Ks=i(),h=o("p"),Va=n("The mutating methods "),ys=o("code"),Xa=n("pop"),Za=n(", "),ws=o("code"),$a=n("shift"),st=n(", and "),vs=o("code"),at=n("unshift"),tt=n(" on arrays can all be solved with similar solutions to "),bs=o("code"),nt=n("push"),et=n(":"),Ys=i(),R=o("pre"),Us=i(),m=o("p"),ot=n("It it also possible to write similar solutions for the mutating methods "),Es=o("code"),pt=n("sort"),lt=n(", "),_s=o("code"),rt=n("splice"),ct=n(", and "),Ts=o("code"),it=n("reverse"),ut=n(". But we don’t have to! Modern browsers benefit from new copying versions of these methods. It is just a matter of replacing them and returning directly:"),Qs=i(),F=o("pre"),Vs=i(),V=o("h2"),dt=n("Freezing"),Xs=i(),y=o("p"),kt=n("Besides marking properties on objects as "),Is=o("code"),ft=n("readonly"),ht=n(" to let the TypeScript compliler notice unintended mutations, we can also add runtime protection by sealing or freezing objects with "),Hs=o("code"),mt=n("Object.seal()"),yt=n(" or "),xs=o("code"),wt=n("Object.freeze()"),vt=n(". Freezing offers the most protection of the two: existing properties are made immutable and can’t be reassigned. It will fail silently, or when called from a strict mode context, it will throw a TypeError."),Zs=i(),x=o("p"),bt=n("This works for Objects as well as Arrays, for the complete documentation and examples see "),B=o("a"),Et=n("MDN"),_t=n("."),$s=i(),X=o("h2"),Tt=n("Libraries"),sa=i(),M=o("p"),It=n("Instead of freezing objects and arrays manually, there are libraries that provide immutable data structures. E.g. the aptly named "),J=o("a"),Ht=n("Immutable"),xt=n(" provides several collection types, like Map. ECMAScript natively already has a collection type Map, but that one is mutable. Immutable’s Map returns a new Map when the original Map was modified, for instance by setting a property."),aa=i(),w=o("p"),Mt=n("Another library is "),N=o("a"),Ot=n("Immer"),Dt=n(". It is used internally in e.g. "),G=o("a"),jt=n("Redux Toolkit"),Ct=n(". It converts data structures to be immutable "),Ms=o("em"),Pt=n("while preserving the mutable methods"),gt=n(". To clarify:"),ta=i(),W=o("pre"),na=i(),v=o("p"),St=n("In this example, "),Os=o("code"),At=n("draft"),Lt=n(" is "),Ds=o("strong"),zt=n("not"),Rt=n(" mutable. It was made immutable by Immer. But the method "),js=o("code"),Ft=n("push"),Bt=n(" still updates it like you would expect from mutable object. It does this by internally copying the object."),ea=i(),Z=o("p"),Jt=n("While the library itself is solid, it introduces one drawback that you should be very wary of in my opinion: someone who is not familiar with Immer might be confused and think this object is mutable. At a bad moment, it may even be copy-pasted to a place that is not protected by Immer. That’s why I would not disregard the more verbose, but explicitly immutable, alternatives."),oa=i(),O=o("p"),Nt=n("In the "),$=o("a"),Gt=n("next chapter"),Wt=n(" we will look at the functional operators."),pa=i(),T=o("p"),Cs=o("em"),qt=n("Acknowledgement:"),Kt=n(" this article was inspired by the course "),q=o("a"),Yt=n("Functional-Light JavaScript, v3 by Kyle Simpson"),Ut=n("."),this.h()},l(s){I=p(s,"P",{});var r=l(I);ua=e(r,"The previous article explained what side effects are and why it is important to prevent them and to write pure functions."),r.forEach(t),gs=u(s),K=p(s,"P",{});var Vt=l(K);da=e(Vt,"The example of a function with a side effect was:"),Vt.forEach(t),Ss=u(s),g=p(s,"PRE",{class:!0});var Qn=l(g);Qn.forEach(t),As=u(s),Y=p(s,"P",{});var Xt=l(Y);ka=e(Xt,"Let’s look at a similar example, but without the global window variable. Instead, an array that is declared outside the function is updated:"),Xt.forEach(t),Ls=u(s),S=p(s,"PRE",{class:!0});var Vn=l(S);Vn.forEach(t),zs=u(s),d=p(s,"P",{});var k=l(d);fa=e(k,"Although the "),ts=p(k,"CODE",{});var Zt=l(ts);ha=e(Zt,"heroes"),Zt.forEach(t),ma=e(k," array is declared with "),ns=p(k,"CODE",{});var $t=l(ns);ya=e($t,"const"),$t.forEach(t),wa=e(k,", that just means that it can’t be reassigned, e.g. with "),es=p(k,"CODE",{});var sn=l(es);va=e(sn,"heroes = []"),sn.forEach(t),ba=e(k,". In fact, the array itself can still be "),os=p(k,"EM",{});var an=l(os);Ea=e(an,"mutated"),an.forEach(t),_a=e(k,". This is the default behavior for data structures in JavaScript. That is why "),ps=p(k,"CODE",{});var tn=l(ps);Ta=e(tn,"addHero"),tn.forEach(t),Ia=e(k," causes a side-effect, it mutates the "),ls=p(k,"CODE",{});var nn=l(ls);Ha=e(nn,"heroes"),nn.forEach(t),xa=e(k," array that was declared outside the scope of the function, so when the "),rs=p(k,"CODE",{});var en=l(rs);Ma=e(en,"heroes"),en.forEach(t),Oa=e(k," array is accessed after calling "),cs=p(k,"CODE",{});var on=l(cs);Da=e(on,"addHero"),on.forEach(t),ja=e(k,", it "),is=p(k,"EM",{});var pn=l(is);Ca=e(pn,"will"),pn.forEach(t),Pa=e(k," contain the value "),us=p(k,"CODE",{});var ln=l(us);ga=e(ln,"Marvin"),ln.forEach(t),Sa=e(k,"."),k.forEach(t),Rs=u(s),H=p(s,"P",{});var la=l(H);Aa=e(la,"Typescript offers the "),ds=p(la,"CODE",{});var rn=l(ds);La=e(rn,"readonly"),rn.forEach(t),za=e(la," modifier to make the compiler prevent calling mutating methods on a data structure:"),la.forEach(t),Fs=u(s),A=p(s,"PRE",{class:!0});var Xn=l(A);Xn.forEach(t),Bs=u(s),U=p(s,"H2",{});var cn=l(U);Ra=e(cn,"Copying instead of mutating"),cn.forEach(t),Js=u(s),b=p(s,"P",{});var ss=l(b);Fa=e(ss,"Instead you should create a new array and return that inside of "),ks=p(ss,"CODE",{});var un=l(ks);Ba=e(un,"addHero"),un.forEach(t),Ja=e(ss,". You could create an intermediary array in "),fs=p(ss,"CODE",{});var dn=l(fs);Na=e(dn,"addHero"),dn.forEach(t),Ga=e(ss," and push to it, and then return it. In functional style you would do this without an intermediary variable. TypeScript has a very readable way to do this, with the spread operator:"),ss.forEach(t),Ns=u(s),L=p(s,"PRE",{class:!0});var Zn=l(L);Zn.forEach(t),Gs=u(s),E=p(s,"P",{});var as=l(E);Wa=e(as,"This copies the values of the "),hs=p(as,"CODE",{});var kn=l(hs);qa=e(kn,"heroes"),kn.forEach(t),Ka=e(as," array and the new value to a new array, preventing side effects on the "),ms=p(as,"CODE",{});var fn=l(ms);Ya=e(fn,"heroes"),fn.forEach(t),Ua=e(as," array. This also applies to objects:"),as.forEach(t),Ws=u(s),z=p(s,"PRE",{class:!0});var $n=l(z);$n.forEach(t),qs=u(s),Q=p(s,"H2",{});var hn=l(Q);Qa=e(hn,"Mutating methods"),hn.forEach(t),Ks=u(s),h=p(s,"P",{});var _=l(h);Va=e(_,"The mutating methods "),ys=p(_,"CODE",{});var mn=l(ys);Xa=e(mn,"pop"),mn.forEach(t),Za=e(_,", "),ws=p(_,"CODE",{});var yn=l(ws);$a=e(yn,"shift"),yn.forEach(t),st=e(_,", and "),vs=p(_,"CODE",{});var wn=l(vs);at=e(wn,"unshift"),wn.forEach(t),tt=e(_," on arrays can all be solved with similar solutions to "),bs=p(_,"CODE",{});var vn=l(bs);nt=e(vn,"push"),vn.forEach(t),et=e(_,":"),_.forEach(t),Ys=u(s),R=p(s,"PRE",{class:!0});var se=l(R);se.forEach(t),Us=u(s),m=p(s,"P",{});var D=l(m);ot=e(D,"It it also possible to write similar solutions for the mutating methods "),Es=p(D,"CODE",{});var bn=l(Es);pt=e(bn,"sort"),bn.forEach(t),lt=e(D,", "),_s=p(D,"CODE",{});var En=l(_s);rt=e(En,"splice"),En.forEach(t),ct=e(D,", and "),Ts=p(D,"CODE",{});var _n=l(Ts);it=e(_n,"reverse"),_n.forEach(t),ut=e(D,". But we don’t have to! Modern browsers benefit from new copying versions of these methods. It is just a matter of replacing them and returning directly:"),D.forEach(t),Qs=u(s),F=p(s,"PRE",{class:!0});var ae=l(F);ae.forEach(t),Vs=u(s),V=p(s,"H2",{});var Tn=l(V);dt=e(Tn,"Freezing"),Tn.forEach(t),Xs=u(s),y=p(s,"P",{});var j=l(y);kt=e(j,"Besides marking properties on objects as "),Is=p(j,"CODE",{});var In=l(Is);ft=e(In,"readonly"),In.forEach(t),ht=e(j," to let the TypeScript compliler notice unintended mutations, we can also add runtime protection by sealing or freezing objects with "),Hs=p(j,"CODE",{});var Hn=l(Hs);mt=e(Hn,"Object.seal()"),Hn.forEach(t),yt=e(j," or "),xs=p(j,"CODE",{});var xn=l(xs);wt=e(xn,"Object.freeze()"),xn.forEach(t),vt=e(j,". Freezing offers the most protection of the two: existing properties are made immutable and can’t be reassigned. It will fail silently, or when called from a strict mode context, it will throw a TypeError."),j.forEach(t),Zs=u(s),x=p(s,"P",{});var ra=l(x);bt=e(ra,"This works for Objects as well as Arrays, for the complete documentation and examples see "),B=p(ra,"A",{href:!0,rel:!0});var Mn=l(B);Et=e(Mn,"MDN"),Mn.forEach(t),_t=e(ra,"."),ra.forEach(t),$s=u(s),X=p(s,"H2",{});var On=l(X);Tt=e(On,"Libraries"),On.forEach(t),sa=u(s),M=p(s,"P",{});var ca=l(M);It=e(ca,"Instead of freezing objects and arrays manually, there are libraries that provide immutable data structures. E.g. the aptly named "),J=p(ca,"A",{href:!0,rel:!0});var Dn=l(J);Ht=e(Dn,"Immutable"),Dn.forEach(t),xt=e(ca," provides several collection types, like Map. ECMAScript natively already has a collection type Map, but that one is mutable. Immutable’s Map returns a new Map when the original Map was modified, for instance by setting a property."),ca.forEach(t),aa=u(s),w=p(s,"P",{});var C=l(w);Mt=e(C,"Another library is "),N=p(C,"A",{href:!0,rel:!0});var jn=l(N);Ot=e(jn,"Immer"),jn.forEach(t),Dt=e(C,". It is used internally in e.g. "),G=p(C,"A",{href:!0,rel:!0});var Cn=l(G);jt=e(Cn,"Redux Toolkit"),Cn.forEach(t),Ct=e(C,". It converts data structures to be immutable "),Ms=p(C,"EM",{});var Pn=l(Ms);Pt=e(Pn,"while preserving the mutable methods"),Pn.forEach(t),gt=e(C,". To clarify:"),C.forEach(t),ta=u(s),W=p(s,"PRE",{class:!0});var te=l(W);te.forEach(t),na=u(s),v=p(s,"P",{});var P=l(v);St=e(P,"In this example, "),Os=p(P,"CODE",{});var gn=l(Os);At=e(gn,"draft"),gn.forEach(t),Lt=e(P," is "),Ds=p(P,"STRONG",{});var Sn=l(Ds);zt=e(Sn,"not"),Sn.forEach(t),Rt=e(P," mutable. It was made immutable by Immer. But the method "),js=p(P,"CODE",{});var An=l(js);Ft=e(An,"push"),An.forEach(t),Bt=e(P," still updates it like you would expect from mutable object. It does this by internally copying the object."),P.forEach(t),ea=u(s),Z=p(s,"P",{});var Ln=l(Z);Jt=e(Ln,"While the library itself is solid, it introduces one drawback that you should be very wary of in my opinion: someone who is not familiar with Immer might be confused and think this object is mutable. At a bad moment, it may even be copy-pasted to a place that is not protected by Immer. That’s why I would not disregard the more verbose, but explicitly immutable, alternatives."),Ln.forEach(t),oa=u(s),O=p(s,"P",{});var ia=l(O);Nt=e(ia,"In the "),$=p(ia,"A",{href:!0});var zn=l($);Gt=e(zn,"next chapter"),zn.forEach(t),Wt=e(ia," we will look at the functional operators."),ia.forEach(t),pa=u(s),T=p(s,"P",{});var Ps=l(T);Cs=p(Ps,"EM",{});var Rn=l(Cs);qt=e(Rn,"Acknowledgement:"),Rn.forEach(t),Kt=e(Ps," this article was inspired by the course "),q=p(Ps,"A",{href:!0,rel:!0});var Fn=l(q);Yt=e(Fn,"Functional-Light JavaScript, v3 by Kyle Simpson"),Fn.forEach(t),Ut=e(Ps,"."),Ps.forEach(t),this.h()},h(){f(g,"class","language-typescript"),f(S,"class","language-typescript"),f(A,"class","language-typescript"),f(L,"class","language-typescript"),f(z,"class","language-typescript"),f(R,"class","language-ts"),f(F,"class","language-ts"),f(B,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"),f(B,"rel","nofollow"),f(J,"href","https://immutable-js.com/"),f(J,"rel","nofollow"),f(N,"href","https://immerjs.github.io/immer/"),f(N,"rel","nofollow"),f(G,"href","https://redux-toolkit.js.org/"),f(G,"rel","nofollow"),f(W,"class","language-ts"),f($,"href","./fpts3-putting-fun-in-functional-operators"),f(q,"href","https://frontendmasters.com/courses/functional-javascript-v3/"),f(q,"rel","nofollow")},m(s,r){c(s,I,r),a(I,ua),c(s,gs,r),c(s,K,r),a(K,da),c(s,Ss,r),c(s,g,r),g.innerHTML=Jn,c(s,As,r),c(s,Y,r),a(Y,ka),c(s,Ls,r),c(s,S,r),S.innerHTML=Nn,c(s,zs,r),c(s,d,r),a(d,fa),a(d,ts),a(ts,ha),a(d,ma),a(d,ns),a(ns,ya),a(d,wa),a(d,es),a(es,va),a(d,ba),a(d,os),a(os,Ea),a(d,_a),a(d,ps),a(ps,Ta),a(d,Ia),a(d,ls),a(ls,Ha),a(d,xa),a(d,rs),a(rs,Ma),a(d,Oa),a(d,cs),a(cs,Da),a(d,ja),a(d,is),a(is,Ca),a(d,Pa),a(d,us),a(us,ga),a(d,Sa),c(s,Rs,r),c(s,H,r),a(H,Aa),a(H,ds),a(ds,La),a(H,za),c(s,Fs,r),c(s,A,r),A.innerHTML=Gn,c(s,Bs,r),c(s,U,r),a(U,Ra),c(s,Js,r),c(s,b,r),a(b,Fa),a(b,ks),a(ks,Ba),a(b,Ja),a(b,fs),a(fs,Na),a(b,Ga),c(s,Ns,r),c(s,L,r),L.innerHTML=Wn,c(s,Gs,r),c(s,E,r),a(E,Wa),a(E,hs),a(hs,qa),a(E,Ka),a(E,ms),a(ms,Ya),a(E,Ua),c(s,Ws,r),c(s,z,r),z.innerHTML=qn,c(s,qs,r),c(s,Q,r),a(Q,Qa),c(s,Ks,r),c(s,h,r),a(h,Va),a(h,ys),a(ys,Xa),a(h,Za),a(h,ws),a(ws,$a),a(h,st),a(h,vs),a(vs,at),a(h,tt),a(h,bs),a(bs,nt),a(h,et),c(s,Ys,r),c(s,R,r),R.innerHTML=Kn,c(s,Us,r),c(s,m,r),a(m,ot),a(m,Es),a(Es,pt),a(m,lt),a(m,_s),a(_s,rt),a(m,ct),a(m,Ts),a(Ts,it),a(m,ut),c(s,Qs,r),c(s,F,r),F.innerHTML=Yn,c(s,Vs,r),c(s,V,r),a(V,dt),c(s,Xs,r),c(s,y,r),a(y,kt),a(y,Is),a(Is,ft),a(y,ht),a(y,Hs),a(Hs,mt),a(y,yt),a(y,xs),a(xs,wt),a(y,vt),c(s,Zs,r),c(s,x,r),a(x,bt),a(x,B),a(B,Et),a(x,_t),c(s,$s,r),c(s,X,r),a(X,Tt),c(s,sa,r),c(s,M,r),a(M,It),a(M,J),a(J,Ht),a(M,xt),c(s,aa,r),c(s,w,r),a(w,Mt),a(w,N),a(N,Ot),a(w,Dt),a(w,G),a(G,jt),a(w,Ct),a(w,Ms),a(Ms,Pt),a(w,gt),c(s,ta,r),c(s,W,r),W.innerHTML=Un,c(s,na,r),c(s,v,r),a(v,St),a(v,Os),a(Os,At),a(v,Lt),a(v,Ds),a(Ds,zt),a(v,Rt),a(v,js),a(js,Ft),a(v,Bt),c(s,ea,r),c(s,Z,r),a(Z,Jt),c(s,oa,r),c(s,O,r),a(O,Nt),a(O,$),a($,Gt),a(O,Wt),c(s,pa,r),c(s,T,r),a(T,Cs),a(Cs,qt),a(T,Kt),a(T,q),a(q,Yt),a(T,Ut)},p:Qt,i:Qt,o:Qt,d(s){s&&t(I),s&&t(gs),s&&t(K),s&&t(Ss),s&&t(g),s&&t(As),s&&t(Y),s&&t(Ls),s&&t(S),s&&t(zs),s&&t(d),s&&t(Rs),s&&t(H),s&&t(Fs),s&&t(A),s&&t(Bs),s&&t(U),s&&t(Js),s&&t(b),s&&t(Ns),s&&t(L),s&&t(Gs),s&&t(E),s&&t(Ws),s&&t(z),s&&t(qs),s&&t(Q),s&&t(Ks),s&&t(h),s&&t(Ys),s&&t(R),s&&t(Us),s&&t(m),s&&t(Qs),s&&t(F),s&&t(Vs),s&&t(V),s&&t(Xs),s&&t(y),s&&t(Zs),s&&t(x),s&&t($s),s&&t(X),s&&t(sa),s&&t(M),s&&t(aa),s&&t(w),s&&t(ta),s&&t(W),s&&t(na),s&&t(v),s&&t(ea),s&&t(Z),s&&t(oa),s&&t(O),s&&t(pa),s&&t(T)}}}const re={title:"FP & TS chapter 2: Immutability",cover:"",date:"04-01-2024",category:"webdevelopment",tags:["webdevelopment","FP & TS"],preview:`The previous article explained what side effects are and why it is important to prevent them and to write pure functions.

The example of a function with a side effect was:`,previewHtml:"<p>The previous article explained what side effects are and why it is important to prevent them and to write pure functions.</p> <p>The example of a function with a side effect was:</p>"};class ce extends ne{constructor(I){super(),ee(this,I,null,pe,oe,{})}}export{ce as default,re as metadata};
