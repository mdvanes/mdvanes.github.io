import{S as Ml,i as Rl,s as Wl,k as o,q as t,a as u,l as p,m as c,r as e,h as a,c as i,n as k,b as r,F as n,G as Tp}from"./index.f054af2f.js";function Il(Qc){let W,pt,$n,v,ct,Js,lt,rt,Fs,ut,it,zs,kt,ft,sa,_s,dt,na,w,Ts,yt,Ns,mt,ht,As,vt,Ys,wt,bt,Os,Et,gs,_t,Tt,xs,At,Gs,Ot,aa,I,xt,Us,Dt,Ct,ta,ss,Vc=`<code class="language-typescript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ea,L,Pt,Ks,St,Lt,Qs,qt,Ht,oa,ns,Xc=`<code class="language-typescript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> elem <span class="token keyword">of</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,pa,Ds,Mt,ca,Cs,Rt,la,as,Zc=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> squareArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">const</span> item <span class="token keyword">of</span> sourceArr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    squareArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squareArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ra,q,Wt,Vs,It,jt,Xs,Bt,Jt,ua,ts,$c=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mapSquare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> squareArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">const</span> item <span class="token keyword">of</span> arr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        squareArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> squareArr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapSquare</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ia,Ps,Ft,ka,es,sl=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> resultArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">const</span> item <span class="token keyword">of</span> sourceArr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> resultArr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> item <span class="token operator">=></span> item <span class="token operator">*</span> item<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,fa,d,zt,Zs,Nt,Yt,$s,gt,Gt,sn,Ut,Kt,nn,Qt,Vt,an,Xt,Zt,da,b,$t,tn,se,ne,en,ae,te,os,ee,oe,ya,ps,nl=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> item <span class="token operator">=></span> item <span class="token operator">*</span> item<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ma,m,pe,on,ce,le,pn,re,ue,cn,ie,ke,ln,fe,de,ha,cs,al='<code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',va,Ss,ye,wa,E,me,rn,he,ve,un,we,be,kn,Ee,_e,ba,ls,tl=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> item <span class="token operator">*</span> item<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ea,Ls,Te,_a,H,Ae,fn,Oe,xe,dn,De,Ce,Ta,rs,el=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> predicateFn<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> resultArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">const</span> item <span class="token keyword">of</span> arr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicateFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> resultArr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">isOdd</span> <span class="token operator">=</span> item <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">,</span> isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Aa,_,Pe,yn,Se,Le,mn,qe,He,hn,Me,Re,Oa,f,We,vn,Ie,je,wn,Be,Je,bn,Fe,ze,En,Ne,Ye,_n,ge,Ge,Tn,Ue,Ke,xa,us,ol=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isOdd</span> <span class="token operator">=</span> item <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Da,qs,Qe,Ca,T,Ve,An,Xe,Ze,On,$e,so,xn,no,ao,Pa,A,to,Dn,eo,oo,Cn,po,co,Pn,lo,ro,Sa,is,pl=`<code class="language-typescript"><span class="token keyword">const</span> sourceArr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isOdd <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,La,O,uo,Sn,io,ko,Ln,fo,yo,qn,mo,ho,qa,ks,cl=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Even</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Odd</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span> 
<span class="token keyword">type</span> <span class="token class-name">OddOrEven</span> <span class="token operator">=</span> Odd <span class="token operator">|</span> Even<span class="token punctuation">;</span>

<span class="token keyword">const</span> sourceArr<span class="token operator">:</span> OddOrEven<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isOdd <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> OddOrEven<span class="token punctuation">)</span><span class="token operator">:</span> item <span class="token keyword">is</span> Odd <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">filter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Odd<span class="token operator">></span></span></span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ha,Hs,vo,Ma,j,wo,Hn,bo,Eo,Ra,Ms,_o,Wa,fs,ll=`<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SomeSuccess</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">SomeError</span> <span class="token punctuation">&#123;</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> <span class="token class-name">SomeResponse</span> <span class="token operator">=</span> SomeSuccess <span class="token operator">|</span> SomeError<span class="token punctuation">;</span>

<span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SomeResponse <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token string">'some data'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ia,B,To,Mn,Ao,Oo,ja,ds,rl=`<code class="language-typescript"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Property 'message' does not exist on type 'SomeSuccess'</span></code>`,Ba,x,xo,Rn,Do,Co,Wn,Po,So,In,Lo,qo,Ja,ys,ul=`<code class="language-typescript"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'message'</span> <span class="token keyword">in</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// derived to be SomeError</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// derived to be SomeSuccess</span></code>`,Fa,J,Ho,jn,Mo,Ro,za,ms,il=`<code class="language-typescript"><span class="token keyword">const</span> isError <span class="token operator">=</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> SomeResponse<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> <span class="token string">'message'</span> <span class="token keyword">in</span> response<span class="token punctuation">;</span>

<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Property 'message' does not exist on type 'SomeSuccess'</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Property 'data' does not exist on type 'SomeError'</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Na,Rs,Wo,Ya,hs,kl=`<code class="language-typescript"><span class="token keyword">const</span> isError <span class="token operator">=</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> SomeResponse<span class="token punctuation">)</span><span class="token operator">:</span> response <span class="token keyword">is</span> SomeError <span class="token operator">=></span> <span class="token string">'message'</span> <span class="token keyword">in</span> response<span class="token punctuation">;</span></code>`,ga,Ws,Io,Ga,D,jo,Bn,Bo,Jo,Jn,Fo,zo,Fn,No,Yo,Ua,vs,fl=`<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bat</span> <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    label<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> list<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Bat<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">'first'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> n<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ka,C,go,zn,Go,Uo,Nn,Ko,Qo,Yn,Vo,Xo,Qa,ws,dl=`<code class="language-typescript"><span class="token keyword">const</span> isDefined <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token constant">T</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> n<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isDefined<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Va,y,Zo,gn,$o,sp,Gn,np,ap,Un,tp,ep,Kn,op,pp,Qn,cp,lp,Xa,F,rp,bs,up,ip,Za,z,kp,Vn,fp,dp,$a,R,Xn,yp,mp,Es,hp,vp;return{c(){W=o("p"),pt=t("When you have been developing in TypeScript for a while, you are probably already using the functional operators, even if you don’t realize it."),$n=u(),v=o("p"),ct=t("The operators "),Js=o("code"),lt=t("Array.prototype.map"),rt=t(", "),Fs=o("code"),ut=t("Array.prototype.filter"),it=t(", and "),zs=o("code"),kt=t("Array.prototype.reduce"),ft=t(` are native JavaScript methods that are used to iterate over
collections without mutating the original collection.`),sa=u(),_s=o("p"),dt=t("Let’s first look at imperative style iteration. It’s possible to iterate over different types of objects, e.g."),na=u(),w=o("ul"),Ts=o("li"),yt=t("string: "),Ns=o("code"),mt=t('const x = "123";'),ht=u(),As=o("li"),vt=t("array:  "),Ys=o("code"),wt=t("const x = [1, 2, 3];"),bt=u(),Os=o("li"),Et=t("array-like objects: e.g. NodeList "),gs=o("code"),_t=t("const x = document.querySelectorAll('div');"),Tt=u(),xs=o("li"),At=t("Map, Set: "),Gs=o("code"),Ot=t("const x = new Set([1,2,3]);"),aa=u(),I=o("p"),xt=t("The oldest way in JavaScript to iterate is with the "),Us=o("code"),Dt=t("for"),Ct=t(" statement, e.g. to iterate over the characters in a string:"),ta=u(),ss=o("pre"),ea=u(),L=o("p"),Pt=t(`This also works for Arrays, but to use it with Sets, you would first have to convert it to an Array.
Also, this is quite verbose, because you have to manually define the counter `),Ks=o("code"),St=t("i"),Lt=t(". Alternatively, the shorthand "),Qs=o("code"),qt=t("for...of"),Ht=t(" can be used to solve both issues:"),oa=u(),ns=o("pre"),pa=u(),Ds=o("h2"),Mt=t("The map operator"),ca=u(),Cs=o("p"),Rt=t("With immutability in mind, what is wrong with this example?"),la=u(),as=o("pre"),ra=u(),q=o("p"),Wt=t("The "),Vs=o("code"),It=t("squareArr"),jt=t(" is mutated, and we want to avoid that it is unexpectedly manipulated. Let’s encapsulate the iteration in a function, so "),Xs=o("code"),Bt=t("squareArr"),Jt=t(" can’t be mutated outside that function:"),ua=u(),ts=o("pre"),ia=u(),Ps=o("p"),Ft=t("That’s much safer! Now we can also build a more abstract function that can iteratively apply any function, instead of always squaring the value."),ka=u(),es=o("pre"),fa=u(),d=o("p"),zt=t("The "),Zs=o("code"),Nt=t("map"),Yt=t(" function returns a value, unlike the "),$s=o("code"),gt=t("for...of"),Gt=t(" loop from the initial example. The function "),sn=o("code"),Ut=t("map"),Kt=t(" is a higher-order function, because it takes a function "),nn=o("code"),Qt=t("fn"),Vt=t(" as a parameter. The function "),an=o("code"),Xt=t("square"),Zt=t(" is a pure function, and is trivial to unit test."),da=u(),b=o("p"),$t=t("Although it’s educational to see how we could implement the "),tn=o("code"),se=t("map"),ne=t(" function, it’s natively supported in TypeScript (with "),en=o("code"),ae=t("Array.prototype.map"),te=t(") as well as in many utility libraries like "),os=o("a"),ee=t("Lodash"),oe=t("."),ya=u(),ps=o("pre"),ma=u(),m=o("p"),pe=t("Because "),on=o("code"),ce=t("Array.prototype.map"),le=t(" expects a function with the iterated item as a parameter, and "),pn=o("code"),re=t("square"),ue=u(),cn=o("em"),ie=t("is"),ke=t(" a function with an item as a parameter, the "),ln=o("code"),fe=t("map"),de=t(" call can be reduced to:"),ha=u(),cs=o("pre"),va=u(),Ss=o("p"),ye=t("The conclusion that these two expressions are equivalent, is proven by what is called “equational reasoning”."),wa=u(),E=o("p"),me=t("The "),rn=o("code"),he=t("map"),ve=t(" function can also be explicitely typed to expect to return a "),un=o("code"),we=t("number"),be=t(". That implies that the result of the "),kn=o("code"),Ee=t("map"),_e=t(" call is always expected to be an array of numbers."),ba=u(),ls=o("pre"),Ea=u(),Ls=o("h2"),Te=t("The filter operator"),_a=u(),H=o("p"),Ae=t("Let’s say you only want to keep the odd numbers from an array. With a "),fn=o("code"),Oe=t("for...of"),xe=t(" loop you could write it similar to the abstract "),dn=o("code"),De=t("map"),Ce=t(" example above, like:"),Ta=u(),rs=o("pre"),Aa=u(),_=o("p"),Pe=t("In this example "),yn=o("code"),Se=t("isOdd"),Le=t(" is a predicate function. A predicate is a function that always results in "),mn=o("code"),qe=t("true"),He=t(" or "),hn=o("code"),Me=t("false"),Re=t(" and can therefore be used as a condition."),Oa=u(),f=o("p"),We=t("You might realize how to use "),vn=o("code"),Ie=t("Array.prototype.map"),je=t(" to write this without the "),wn=o("code"),Be=t("for"),Je=t(" loop, but it’s easier to use the "),bn=o("code"),Fe=t("Array.prototype.filter"),ze=t(" operator. Where "),En=o("code"),Ne=t("map"),Ye=t(" always returns the same amount of items that goes in, "),_n=o("code"),ge=t("filter"),Ge=t(" uses a predicate to determine for each item in the array if it should be returned. The output of "),Tn=o("code"),Ue=t("filter"),Ke=t(" is therefore of the same length or shorter than its input."),xa=u(),us=o("pre"),Da=u(),qs=o("h2"),Qe=t("Type guards"),Ca=u(),T=o("p"),Ve=t("In the "),An=o("code"),Xe=t("map"),Ze=t(" example the call used a generic to specify the return type with "),On=o("code"),$e=t(".map<number>"),so=t(". This does not work the same way with "),xn=o("code"),no=t("filter"),ao=t(", because you can actually narrow the type based on the condition. E.g. if you are filtering odd numbers, numbers go in, but a specific subset of numbers comes out. This is extremely powerful because the type system can help you with this guarantee that the filtered values are of a specific subtype. We use TypeScript’s type guard syntax for this."),Pa=u(),A=o("p"),to=t("Trivially, since a filter takes a predicate that always is "),Dn=o("code"),eo=t("true"),oo=t(" or "),Cn=o("code"),po=t("false"),co=t(", you would expect the return type to be "),Pn=o("code"),lo=t("boolean"),ro=t(":"),Sa=u(),is=o("pre"),La=u(),O=o("p"),uo=t("But in fact, you can specify what the type of "),Sn=o("code"),io=t("item"),ko=t(" is when the predicate is "),Ln=o("code"),fo=t("true"),yo=t(", by defining "),qn=o("code"),mo=t("isOdd"),ho=t(" like a “type predicate”:"),qa=u(),ks=o("pre"),Ha=u(),Hs=o("h3"),vo=t("Practical example: a response may have an error type"),Ma=u(),j=o("p"),wo=t("This example is contrived, so let me give a practical example with a fetch response that may be an error. Using the type guard guarantees that after the conditional the response is of one of the subtypes. You can also see that a type guard predicate can be used without using a "),Hn=o("code"),bo=t("filter"),Eo=t("."),Ra=u(),Ms=o("p"),_o=t("Given the types and function:"),Wa=u(),fs=o("pre"),Ia=u(),B=o("p"),To=t("This would fail, because response could also be of type "),Mn=o("code"),Ao=t("SomeSuccess"),Oo=t(":"),ja=u(),ds=o("pre"),Ba=u(),x=o("p"),xo=t("Checking with "),Rn=o("code"),Do=t("if(response.message)"),Co=t(" is not possible, for the same reason. You "),Wn=o("em"),Po=t("can"),So=t(" check with the "),In=o("code"),Lo=t("in"),qo=t(" operator:"),Ja=u(),ys=o("pre"),Fa=u(),J=o("p"),Ho=t("But if you extract the conditional to a function, it would fail if it has a normal "),jn=o("code"),Mo=t("boolean"),Ro=t(" return type:"),za=u(),ms=o("pre"),Na=u(),Rs=o("p"),Wo=t("And you can fix it by writing the conditional like a type guard:"),Ya=u(),hs=o("pre"),ga=u(),Ws=o("h3"),Io=t("Practical example: undefined checks"),Ga=u(),D=o("p"),jo=t("Another useful application of a filter with a type guard is reducing checks for undefined values in your conditions. Assume you get an array of objects from a service, which we will call "),Bn=o("code"),Bo=t("list"),Jo=t(". We want to get the property "),Jn=o("code"),Fo=t("label"),zo=t(" for each of these objects and use these later. When only a "),Fn=o("code"),No=t("map"),Yo=t(" is used, the resulting array may contain undefined values:"),Ua=u(),vs=o("pre"),Ka=u(),C=o("p"),go=t("The type of "),zn=o("code"),Go=t("newList"),Uo=t(" is now derived as "),Nn=o("code"),Ko=t("Array<string | undefined>"),Qo=t(". This makes it hard to follow up transformations, because you will have to perform undefined checks. We can fix this by doing this up front with a type guard we will call "),Yn=o("code"),Vo=t("isDefined"),Xo=t("."),Qa=u(),ws=o("pre"),Va=u(),y=o("p"),Zo=t("The type of "),gn=o("code"),$o=t("newList"),sp=t(" is now derived as "),Gn=o("code"),np=t("Array<string>"),ap=t(". Note that for older versions of TypesScript if you would not use the type guard syntax "),Un=o("code"),tp=t("value is T"),ep=t(", this would not work and "),Kn=o("code"),op=t("newList"),pp=t(" would still have the type "),Qn=o("code"),cp=t("Array<string | undefined>"),lp=t("!"),Xa=u(),F=o("p"),rp=t("This has been fixed since TypeScript 5.5 with "),bs=o("a"),up=t("Inferred Type Predicates"),ip=t("."),Za=u(),z=o("p"),kp=t("In the next chapter we will look at more functional operators, including "),Vn=o("code"),fp=t("Array.prototype.reduce"),dp=t("."),$a=u(),R=o("p"),Xn=o("em"),yp=t("Acknowledgement:"),mp=t(" this article was inspired by the course "),Es=o("a"),hp=t("Functional-Light JavaScript, v3 by Kyle Simpson"),vp=t("."),this.h()},l(s){W=p(s,"P",{});var l=c(W);pt=e(l,"When you have been developing in TypeScript for a while, you are probably already using the functional operators, even if you don’t realize it."),l.forEach(a),$n=i(s),v=p(s,"P",{});var N=c(v);ct=e(N,"The operators "),Js=p(N,"CODE",{});var Ap=c(Js);lt=e(Ap,"Array.prototype.map"),Ap.forEach(a),rt=e(N,", "),Fs=p(N,"CODE",{});var Op=c(Fs);ut=e(Op,"Array.prototype.filter"),Op.forEach(a),it=e(N,", and "),zs=p(N,"CODE",{});var xp=c(zs);kt=e(xp,"Array.prototype.reduce"),xp.forEach(a),ft=e(N,` are native JavaScript methods that are used to iterate over
collections without mutating the original collection.`),N.forEach(a),sa=i(s),_s=p(s,"P",{});var Dp=c(_s);dt=e(Dp,"Let’s first look at imperative style iteration. It’s possible to iterate over different types of objects, e.g."),Dp.forEach(a),na=i(s),w=p(s,"UL",{});var Y=c(w);Ts=p(Y,"LI",{});var wp=c(Ts);yt=e(wp,"string: "),Ns=p(wp,"CODE",{});var Cp=c(Ns);mt=e(Cp,'const x = "123";'),Cp.forEach(a),wp.forEach(a),ht=i(Y),As=p(Y,"LI",{});var bp=c(As);vt=e(bp,"array:  "),Ys=p(bp,"CODE",{});var Pp=c(Ys);wt=e(Pp,"const x = [1, 2, 3];"),Pp.forEach(a),bp.forEach(a),bt=i(Y),Os=p(Y,"LI",{});var Ep=c(Os);Et=e(Ep,"array-like objects: e.g. NodeList "),gs=p(Ep,"CODE",{});var Sp=c(gs);_t=e(Sp,"const x = document.querySelectorAll('div');"),Sp.forEach(a),Ep.forEach(a),Tt=i(Y),xs=p(Y,"LI",{});var _p=c(xs);At=e(_p,"Map, Set: "),Gs=p(_p,"CODE",{});var Lp=c(Gs);Ot=e(Lp,"const x = new Set([1,2,3]);"),Lp.forEach(a),_p.forEach(a),Y.forEach(a),aa=i(s),I=p(s,"P",{});var st=c(I);xt=e(st,"The oldest way in JavaScript to iterate is with the "),Us=p(st,"CODE",{});var qp=c(Us);Dt=e(qp,"for"),qp.forEach(a),Ct=e(st," statement, e.g. to iterate over the characters in a string:"),st.forEach(a),ta=i(s),ss=p(s,"PRE",{class:!0});var yl=c(ss);yl.forEach(a),ea=i(s),L=p(s,"P",{});var Is=c(L);Pt=e(Is,`This also works for Arrays, but to use it with Sets, you would first have to convert it to an Array.
Also, this is quite verbose, because you have to manually define the counter `),Ks=p(Is,"CODE",{});var Hp=c(Ks);St=e(Hp,"i"),Hp.forEach(a),Lt=e(Is,". Alternatively, the shorthand "),Qs=p(Is,"CODE",{});var Mp=c(Qs);qt=e(Mp,"for...of"),Mp.forEach(a),Ht=e(Is," can be used to solve both issues:"),Is.forEach(a),oa=i(s),ns=p(s,"PRE",{class:!0});var ml=c(ns);ml.forEach(a),pa=i(s),Ds=p(s,"H2",{});var Rp=c(Ds);Mt=e(Rp,"The map operator"),Rp.forEach(a),ca=i(s),Cs=p(s,"P",{});var Wp=c(Cs);Rt=e(Wp,"With immutability in mind, what is wrong with this example?"),Wp.forEach(a),la=i(s),as=p(s,"PRE",{class:!0});var hl=c(as);hl.forEach(a),ra=i(s),q=p(s,"P",{});var js=c(q);Wt=e(js,"The "),Vs=p(js,"CODE",{});var Ip=c(Vs);It=e(Ip,"squareArr"),Ip.forEach(a),jt=e(js," is mutated, and we want to avoid that it is unexpectedly manipulated. Let’s encapsulate the iteration in a function, so "),Xs=p(js,"CODE",{});var jp=c(Xs);Bt=e(jp,"squareArr"),jp.forEach(a),Jt=e(js," can’t be mutated outside that function:"),js.forEach(a),ua=i(s),ts=p(s,"PRE",{class:!0});var vl=c(ts);vl.forEach(a),ia=i(s),Ps=p(s,"P",{});var Bp=c(Ps);Ft=e(Bp,"That’s much safer! Now we can also build a more abstract function that can iteratively apply any function, instead of always squaring the value."),Bp.forEach(a),ka=i(s),es=p(s,"PRE",{class:!0});var wl=c(es);wl.forEach(a),fa=i(s),d=p(s,"P",{});var P=c(d);zt=e(P,"The "),Zs=p(P,"CODE",{});var Jp=c(Zs);Nt=e(Jp,"map"),Jp.forEach(a),Yt=e(P," function returns a value, unlike the "),$s=p(P,"CODE",{});var Fp=c($s);gt=e(Fp,"for...of"),Fp.forEach(a),Gt=e(P," loop from the initial example. The function "),sn=p(P,"CODE",{});var zp=c(sn);Ut=e(zp,"map"),zp.forEach(a),Kt=e(P," is a higher-order function, because it takes a function "),nn=p(P,"CODE",{});var Np=c(nn);Qt=e(Np,"fn"),Np.forEach(a),Vt=e(P," as a parameter. The function "),an=p(P,"CODE",{});var Yp=c(an);Xt=e(Yp,"square"),Yp.forEach(a),Zt=e(P," is a pure function, and is trivial to unit test."),P.forEach(a),da=i(s),b=p(s,"P",{});var g=c(b);$t=e(g,"Although it’s educational to see how we could implement the "),tn=p(g,"CODE",{});var gp=c(tn);se=e(gp,"map"),gp.forEach(a),ne=e(g," function, it’s natively supported in TypeScript (with "),en=p(g,"CODE",{});var Gp=c(en);ae=e(Gp,"Array.prototype.map"),Gp.forEach(a),te=e(g,") as well as in many utility libraries like "),os=p(g,"A",{href:!0,rel:!0});var Up=c(os);ee=e(Up,"Lodash"),Up.forEach(a),oe=e(g,"."),g.forEach(a),ya=i(s),ps=p(s,"PRE",{class:!0});var bl=c(ps);bl.forEach(a),ma=i(s),m=p(s,"P",{});var M=c(m);pe=e(M,"Because "),on=p(M,"CODE",{});var Kp=c(on);ce=e(Kp,"Array.prototype.map"),Kp.forEach(a),le=e(M," expects a function with the iterated item as a parameter, and "),pn=p(M,"CODE",{});var Qp=c(pn);re=e(Qp,"square"),Qp.forEach(a),ue=i(M),cn=p(M,"EM",{});var Vp=c(cn);ie=e(Vp,"is"),Vp.forEach(a),ke=e(M," a function with an item as a parameter, the "),ln=p(M,"CODE",{});var Xp=c(ln);fe=e(Xp,"map"),Xp.forEach(a),de=e(M," call can be reduced to:"),M.forEach(a),ha=i(s),cs=p(s,"PRE",{class:!0});var El=c(cs);El.forEach(a),va=i(s),Ss=p(s,"P",{});var Zp=c(Ss);ye=e(Zp,"The conclusion that these two expressions are equivalent, is proven by what is called “equational reasoning”."),Zp.forEach(a),wa=i(s),E=p(s,"P",{});var G=c(E);me=e(G,"The "),rn=p(G,"CODE",{});var $p=c(rn);he=e($p,"map"),$p.forEach(a),ve=e(G," function can also be explicitely typed to expect to return a "),un=p(G,"CODE",{});var sc=c(un);we=e(sc,"number"),sc.forEach(a),be=e(G,". That implies that the result of the "),kn=p(G,"CODE",{});var nc=c(kn);Ee=e(nc,"map"),nc.forEach(a),_e=e(G," call is always expected to be an array of numbers."),G.forEach(a),ba=i(s),ls=p(s,"PRE",{class:!0});var _l=c(ls);_l.forEach(a),Ea=i(s),Ls=p(s,"H2",{});var ac=c(Ls);Te=e(ac,"The filter operator"),ac.forEach(a),_a=i(s),H=p(s,"P",{});var Bs=c(H);Ae=e(Bs,"Let’s say you only want to keep the odd numbers from an array. With a "),fn=p(Bs,"CODE",{});var tc=c(fn);Oe=e(tc,"for...of"),tc.forEach(a),xe=e(Bs," loop you could write it similar to the abstract "),dn=p(Bs,"CODE",{});var ec=c(dn);De=e(ec,"map"),ec.forEach(a),Ce=e(Bs," example above, like:"),Bs.forEach(a),Ta=i(s),rs=p(s,"PRE",{class:!0});var Tl=c(rs);Tl.forEach(a),Aa=i(s),_=p(s,"P",{});var U=c(_);Pe=e(U,"In this example "),yn=p(U,"CODE",{});var oc=c(yn);Se=e(oc,"isOdd"),oc.forEach(a),Le=e(U," is a predicate function. A predicate is a function that always results in "),mn=p(U,"CODE",{});var pc=c(mn);qe=e(pc,"true"),pc.forEach(a),He=e(U," or "),hn=p(U,"CODE",{});var cc=c(hn);Me=e(cc,"false"),cc.forEach(a),Re=e(U," and can therefore be used as a condition."),U.forEach(a),Oa=i(s),f=p(s,"P",{});var h=c(f);We=e(h,"You might realize how to use "),vn=p(h,"CODE",{});var lc=c(vn);Ie=e(lc,"Array.prototype.map"),lc.forEach(a),je=e(h," to write this without the "),wn=p(h,"CODE",{});var rc=c(wn);Be=e(rc,"for"),rc.forEach(a),Je=e(h," loop, but it’s easier to use the "),bn=p(h,"CODE",{});var uc=c(bn);Fe=e(uc,"Array.prototype.filter"),uc.forEach(a),ze=e(h," operator. Where "),En=p(h,"CODE",{});var ic=c(En);Ne=e(ic,"map"),ic.forEach(a),Ye=e(h," always returns the same amount of items that goes in, "),_n=p(h,"CODE",{});var kc=c(_n);ge=e(kc,"filter"),kc.forEach(a),Ge=e(h," uses a predicate to determine for each item in the array if it should be returned. The output of "),Tn=p(h,"CODE",{});var fc=c(Tn);Ue=e(fc,"filter"),fc.forEach(a),Ke=e(h," is therefore of the same length or shorter than its input."),h.forEach(a),xa=i(s),us=p(s,"PRE",{class:!0});var Al=c(us);Al.forEach(a),Da=i(s),qs=p(s,"H2",{});var dc=c(qs);Qe=e(dc,"Type guards"),dc.forEach(a),Ca=i(s),T=p(s,"P",{});var K=c(T);Ve=e(K,"In the "),An=p(K,"CODE",{});var yc=c(An);Xe=e(yc,"map"),yc.forEach(a),Ze=e(K," example the call used a generic to specify the return type with "),On=p(K,"CODE",{});var mc=c(On);$e=e(mc,".map<number>"),mc.forEach(a),so=e(K,". This does not work the same way with "),xn=p(K,"CODE",{});var hc=c(xn);no=e(hc,"filter"),hc.forEach(a),ao=e(K,", because you can actually narrow the type based on the condition. E.g. if you are filtering odd numbers, numbers go in, but a specific subset of numbers comes out. This is extremely powerful because the type system can help you with this guarantee that the filtered values are of a specific subtype. We use TypeScript’s type guard syntax for this."),K.forEach(a),Pa=i(s),A=p(s,"P",{});var Q=c(A);to=e(Q,"Trivially, since a filter takes a predicate that always is "),Dn=p(Q,"CODE",{});var vc=c(Dn);eo=e(vc,"true"),vc.forEach(a),oo=e(Q," or "),Cn=p(Q,"CODE",{});var wc=c(Cn);po=e(wc,"false"),wc.forEach(a),co=e(Q,", you would expect the return type to be "),Pn=p(Q,"CODE",{});var bc=c(Pn);lo=e(bc,"boolean"),bc.forEach(a),ro=e(Q,":"),Q.forEach(a),Sa=i(s),is=p(s,"PRE",{class:!0});var Ol=c(is);Ol.forEach(a),La=i(s),O=p(s,"P",{});var V=c(O);uo=e(V,"But in fact, you can specify what the type of "),Sn=p(V,"CODE",{});var Ec=c(Sn);io=e(Ec,"item"),Ec.forEach(a),ko=e(V," is when the predicate is "),Ln=p(V,"CODE",{});var _c=c(Ln);fo=e(_c,"true"),_c.forEach(a),yo=e(V,", by defining "),qn=p(V,"CODE",{});var Tc=c(qn);mo=e(Tc,"isOdd"),Tc.forEach(a),ho=e(V," like a “type predicate”:"),V.forEach(a),qa=i(s),ks=p(s,"PRE",{class:!0});var xl=c(ks);xl.forEach(a),Ha=i(s),Hs=p(s,"H3",{});var Ac=c(Hs);vo=e(Ac,"Practical example: a response may have an error type"),Ac.forEach(a),Ma=i(s),j=p(s,"P",{});var nt=c(j);wo=e(nt,"This example is contrived, so let me give a practical example with a fetch response that may be an error. Using the type guard guarantees that after the conditional the response is of one of the subtypes. You can also see that a type guard predicate can be used without using a "),Hn=p(nt,"CODE",{});var Oc=c(Hn);bo=e(Oc,"filter"),Oc.forEach(a),Eo=e(nt,"."),nt.forEach(a),Ra=i(s),Ms=p(s,"P",{});var xc=c(Ms);_o=e(xc,"Given the types and function:"),xc.forEach(a),Wa=i(s),fs=p(s,"PRE",{class:!0});var Dl=c(fs);Dl.forEach(a),Ia=i(s),B=p(s,"P",{});var at=c(B);To=e(at,"This would fail, because response could also be of type "),Mn=p(at,"CODE",{});var Dc=c(Mn);Ao=e(Dc,"SomeSuccess"),Dc.forEach(a),Oo=e(at,":"),at.forEach(a),ja=i(s),ds=p(s,"PRE",{class:!0});var Cl=c(ds);Cl.forEach(a),Ba=i(s),x=p(s,"P",{});var X=c(x);xo=e(X,"Checking with "),Rn=p(X,"CODE",{});var Cc=c(Rn);Do=e(Cc,"if(response.message)"),Cc.forEach(a),Co=e(X," is not possible, for the same reason. You "),Wn=p(X,"EM",{});var Pc=c(Wn);Po=e(Pc,"can"),Pc.forEach(a),So=e(X," check with the "),In=p(X,"CODE",{});var Sc=c(In);Lo=e(Sc,"in"),Sc.forEach(a),qo=e(X," operator:"),X.forEach(a),Ja=i(s),ys=p(s,"PRE",{class:!0});var Pl=c(ys);Pl.forEach(a),Fa=i(s),J=p(s,"P",{});var tt=c(J);Ho=e(tt,"But if you extract the conditional to a function, it would fail if it has a normal "),jn=p(tt,"CODE",{});var Lc=c(jn);Mo=e(Lc,"boolean"),Lc.forEach(a),Ro=e(tt," return type:"),tt.forEach(a),za=i(s),ms=p(s,"PRE",{class:!0});var Sl=c(ms);Sl.forEach(a),Na=i(s),Rs=p(s,"P",{});var qc=c(Rs);Wo=e(qc,"And you can fix it by writing the conditional like a type guard:"),qc.forEach(a),Ya=i(s),hs=p(s,"PRE",{class:!0});var Ll=c(hs);Ll.forEach(a),ga=i(s),Ws=p(s,"H3",{});var Hc=c(Ws);Io=e(Hc,"Practical example: undefined checks"),Hc.forEach(a),Ga=i(s),D=p(s,"P",{});var Z=c(D);jo=e(Z,"Another useful application of a filter with a type guard is reducing checks for undefined values in your conditions. Assume you get an array of objects from a service, which we will call "),Bn=p(Z,"CODE",{});var Mc=c(Bn);Bo=e(Mc,"list"),Mc.forEach(a),Jo=e(Z,". We want to get the property "),Jn=p(Z,"CODE",{});var Rc=c(Jn);Fo=e(Rc,"label"),Rc.forEach(a),zo=e(Z," for each of these objects and use these later. When only a "),Fn=p(Z,"CODE",{});var Wc=c(Fn);No=e(Wc,"map"),Wc.forEach(a),Yo=e(Z," is used, the resulting array may contain undefined values:"),Z.forEach(a),Ua=i(s),vs=p(s,"PRE",{class:!0});var ql=c(vs);ql.forEach(a),Ka=i(s),C=p(s,"P",{});var $=c(C);go=e($,"The type of "),zn=p($,"CODE",{});var Ic=c(zn);Go=e(Ic,"newList"),Ic.forEach(a),Uo=e($," is now derived as "),Nn=p($,"CODE",{});var jc=c(Nn);Ko=e(jc,"Array<string | undefined>"),jc.forEach(a),Qo=e($,". This makes it hard to follow up transformations, because you will have to perform undefined checks. We can fix this by doing this up front with a type guard we will call "),Yn=p($,"CODE",{});var Bc=c(Yn);Vo=e(Bc,"isDefined"),Bc.forEach(a),Xo=e($,"."),$.forEach(a),Qa=i(s),ws=p(s,"PRE",{class:!0});var Hl=c(ws);Hl.forEach(a),Va=i(s),y=p(s,"P",{});var S=c(y);Zo=e(S,"The type of "),gn=p(S,"CODE",{});var Jc=c(gn);$o=e(Jc,"newList"),Jc.forEach(a),sp=e(S," is now derived as "),Gn=p(S,"CODE",{});var Fc=c(Gn);np=e(Fc,"Array<string>"),Fc.forEach(a),ap=e(S,". Note that for older versions of TypesScript if you would not use the type guard syntax "),Un=p(S,"CODE",{});var zc=c(Un);tp=e(zc,"value is T"),zc.forEach(a),ep=e(S,", this would not work and "),Kn=p(S,"CODE",{});var Nc=c(Kn);op=e(Nc,"newList"),Nc.forEach(a),pp=e(S," would still have the type "),Qn=p(S,"CODE",{});var Yc=c(Qn);cp=e(Yc,"Array<string | undefined>"),Yc.forEach(a),lp=e(S,"!"),S.forEach(a),Xa=i(s),F=p(s,"P",{});var et=c(F);rp=e(et,"This has been fixed since TypeScript 5.5 with "),bs=p(et,"A",{href:!0,rel:!0});var gc=c(bs);up=e(gc,"Inferred Type Predicates"),gc.forEach(a),ip=e(et,"."),et.forEach(a),Za=i(s),z=p(s,"P",{});var ot=c(z);kp=e(ot,"In the next chapter we will look at more functional operators, including "),Vn=p(ot,"CODE",{});var Gc=c(Vn);fp=e(Gc,"Array.prototype.reduce"),Gc.forEach(a),dp=e(ot,"."),ot.forEach(a),$a=i(s),R=p(s,"P",{});var Zn=c(R);Xn=p(Zn,"EM",{});var Uc=c(Xn);yp=e(Uc,"Acknowledgement:"),Uc.forEach(a),mp=e(Zn," this article was inspired by the course "),Es=p(Zn,"A",{href:!0,rel:!0});var Kc=c(Es);hp=e(Kc,"Functional-Light JavaScript, v3 by Kyle Simpson"),Kc.forEach(a),vp=e(Zn,"."),Zn.forEach(a),this.h()},h(){k(ss,"class","language-typescript"),k(ns,"class","language-typescript"),k(as,"class","language-typescript"),k(ts,"class","language-typescript"),k(es,"class","language-typescript"),k(os,"href","https://lodash.com"),k(os,"rel","nofollow"),k(ps,"class","language-typescript"),k(cs,"class","language-typescript"),k(ls,"class","language-typescript"),k(rs,"class","language-typescript"),k(us,"class","language-typescript"),k(is,"class","language-typescript"),k(ks,"class","language-typescript"),k(fs,"class","language-typescript"),k(ds,"class","language-typescript"),k(ys,"class","language-typescript"),k(ms,"class","language-typescript"),k(hs,"class","language-typescript"),k(vs,"class","language-typescript"),k(ws,"class","language-typescript"),k(bs,"href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#inferred-type-predicates"),k(bs,"rel","nofollow"),k(Es,"href","https://frontendmasters.com/courses/functional-javascript-v3/"),k(Es,"rel","nofollow")},m(s,l){r(s,W,l),n(W,pt),r(s,$n,l),r(s,v,l),n(v,ct),n(v,Js),n(Js,lt),n(v,rt),n(v,Fs),n(Fs,ut),n(v,it),n(v,zs),n(zs,kt),n(v,ft),r(s,sa,l),r(s,_s,l),n(_s,dt),r(s,na,l),r(s,w,l),n(w,Ts),n(Ts,yt),n(Ts,Ns),n(Ns,mt),n(w,ht),n(w,As),n(As,vt),n(As,Ys),n(Ys,wt),n(w,bt),n(w,Os),n(Os,Et),n(Os,gs),n(gs,_t),n(w,Tt),n(w,xs),n(xs,At),n(xs,Gs),n(Gs,Ot),r(s,aa,l),r(s,I,l),n(I,xt),n(I,Us),n(Us,Dt),n(I,Ct),r(s,ta,l),r(s,ss,l),ss.innerHTML=Vc,r(s,ea,l),r(s,L,l),n(L,Pt),n(L,Ks),n(Ks,St),n(L,Lt),n(L,Qs),n(Qs,qt),n(L,Ht),r(s,oa,l),r(s,ns,l),ns.innerHTML=Xc,r(s,pa,l),r(s,Ds,l),n(Ds,Mt),r(s,ca,l),r(s,Cs,l),n(Cs,Rt),r(s,la,l),r(s,as,l),as.innerHTML=Zc,r(s,ra,l),r(s,q,l),n(q,Wt),n(q,Vs),n(Vs,It),n(q,jt),n(q,Xs),n(Xs,Bt),n(q,Jt),r(s,ua,l),r(s,ts,l),ts.innerHTML=$c,r(s,ia,l),r(s,Ps,l),n(Ps,Ft),r(s,ka,l),r(s,es,l),es.innerHTML=sl,r(s,fa,l),r(s,d,l),n(d,zt),n(d,Zs),n(Zs,Nt),n(d,Yt),n(d,$s),n($s,gt),n(d,Gt),n(d,sn),n(sn,Ut),n(d,Kt),n(d,nn),n(nn,Qt),n(d,Vt),n(d,an),n(an,Xt),n(d,Zt),r(s,da,l),r(s,b,l),n(b,$t),n(b,tn),n(tn,se),n(b,ne),n(b,en),n(en,ae),n(b,te),n(b,os),n(os,ee),n(b,oe),r(s,ya,l),r(s,ps,l),ps.innerHTML=nl,r(s,ma,l),r(s,m,l),n(m,pe),n(m,on),n(on,ce),n(m,le),n(m,pn),n(pn,re),n(m,ue),n(m,cn),n(cn,ie),n(m,ke),n(m,ln),n(ln,fe),n(m,de),r(s,ha,l),r(s,cs,l),cs.innerHTML=al,r(s,va,l),r(s,Ss,l),n(Ss,ye),r(s,wa,l),r(s,E,l),n(E,me),n(E,rn),n(rn,he),n(E,ve),n(E,un),n(un,we),n(E,be),n(E,kn),n(kn,Ee),n(E,_e),r(s,ba,l),r(s,ls,l),ls.innerHTML=tl,r(s,Ea,l),r(s,Ls,l),n(Ls,Te),r(s,_a,l),r(s,H,l),n(H,Ae),n(H,fn),n(fn,Oe),n(H,xe),n(H,dn),n(dn,De),n(H,Ce),r(s,Ta,l),r(s,rs,l),rs.innerHTML=el,r(s,Aa,l),r(s,_,l),n(_,Pe),n(_,yn),n(yn,Se),n(_,Le),n(_,mn),n(mn,qe),n(_,He),n(_,hn),n(hn,Me),n(_,Re),r(s,Oa,l),r(s,f,l),n(f,We),n(f,vn),n(vn,Ie),n(f,je),n(f,wn),n(wn,Be),n(f,Je),n(f,bn),n(bn,Fe),n(f,ze),n(f,En),n(En,Ne),n(f,Ye),n(f,_n),n(_n,ge),n(f,Ge),n(f,Tn),n(Tn,Ue),n(f,Ke),r(s,xa,l),r(s,us,l),us.innerHTML=ol,r(s,Da,l),r(s,qs,l),n(qs,Qe),r(s,Ca,l),r(s,T,l),n(T,Ve),n(T,An),n(An,Xe),n(T,Ze),n(T,On),n(On,$e),n(T,so),n(T,xn),n(xn,no),n(T,ao),r(s,Pa,l),r(s,A,l),n(A,to),n(A,Dn),n(Dn,eo),n(A,oo),n(A,Cn),n(Cn,po),n(A,co),n(A,Pn),n(Pn,lo),n(A,ro),r(s,Sa,l),r(s,is,l),is.innerHTML=pl,r(s,La,l),r(s,O,l),n(O,uo),n(O,Sn),n(Sn,io),n(O,ko),n(O,Ln),n(Ln,fo),n(O,yo),n(O,qn),n(qn,mo),n(O,ho),r(s,qa,l),r(s,ks,l),ks.innerHTML=cl,r(s,Ha,l),r(s,Hs,l),n(Hs,vo),r(s,Ma,l),r(s,j,l),n(j,wo),n(j,Hn),n(Hn,bo),n(j,Eo),r(s,Ra,l),r(s,Ms,l),n(Ms,_o),r(s,Wa,l),r(s,fs,l),fs.innerHTML=ll,r(s,Ia,l),r(s,B,l),n(B,To),n(B,Mn),n(Mn,Ao),n(B,Oo),r(s,ja,l),r(s,ds,l),ds.innerHTML=rl,r(s,Ba,l),r(s,x,l),n(x,xo),n(x,Rn),n(Rn,Do),n(x,Co),n(x,Wn),n(Wn,Po),n(x,So),n(x,In),n(In,Lo),n(x,qo),r(s,Ja,l),r(s,ys,l),ys.innerHTML=ul,r(s,Fa,l),r(s,J,l),n(J,Ho),n(J,jn),n(jn,Mo),n(J,Ro),r(s,za,l),r(s,ms,l),ms.innerHTML=il,r(s,Na,l),r(s,Rs,l),n(Rs,Wo),r(s,Ya,l),r(s,hs,l),hs.innerHTML=kl,r(s,ga,l),r(s,Ws,l),n(Ws,Io),r(s,Ga,l),r(s,D,l),n(D,jo),n(D,Bn),n(Bn,Bo),n(D,Jo),n(D,Jn),n(Jn,Fo),n(D,zo),n(D,Fn),n(Fn,No),n(D,Yo),r(s,Ua,l),r(s,vs,l),vs.innerHTML=fl,r(s,Ka,l),r(s,C,l),n(C,go),n(C,zn),n(zn,Go),n(C,Uo),n(C,Nn),n(Nn,Ko),n(C,Qo),n(C,Yn),n(Yn,Vo),n(C,Xo),r(s,Qa,l),r(s,ws,l),ws.innerHTML=dl,r(s,Va,l),r(s,y,l),n(y,Zo),n(y,gn),n(gn,$o),n(y,sp),n(y,Gn),n(Gn,np),n(y,ap),n(y,Un),n(Un,tp),n(y,ep),n(y,Kn),n(Kn,op),n(y,pp),n(y,Qn),n(Qn,cp),n(y,lp),r(s,Xa,l),r(s,F,l),n(F,rp),n(F,bs),n(bs,up),n(F,ip),r(s,Za,l),r(s,z,l),n(z,kp),n(z,Vn),n(Vn,fp),n(z,dp),r(s,$a,l),r(s,R,l),n(R,Xn),n(Xn,yp),n(R,mp),n(R,Es),n(Es,hp),n(R,vp)},p:Tp,i:Tp,o:Tp,d(s){s&&a(W),s&&a($n),s&&a(v),s&&a(sa),s&&a(_s),s&&a(na),s&&a(w),s&&a(aa),s&&a(I),s&&a(ta),s&&a(ss),s&&a(ea),s&&a(L),s&&a(oa),s&&a(ns),s&&a(pa),s&&a(Ds),s&&a(ca),s&&a(Cs),s&&a(la),s&&a(as),s&&a(ra),s&&a(q),s&&a(ua),s&&a(ts),s&&a(ia),s&&a(Ps),s&&a(ka),s&&a(es),s&&a(fa),s&&a(d),s&&a(da),s&&a(b),s&&a(ya),s&&a(ps),s&&a(ma),s&&a(m),s&&a(ha),s&&a(cs),s&&a(va),s&&a(Ss),s&&a(wa),s&&a(E),s&&a(ba),s&&a(ls),s&&a(Ea),s&&a(Ls),s&&a(_a),s&&a(H),s&&a(Ta),s&&a(rs),s&&a(Aa),s&&a(_),s&&a(Oa),s&&a(f),s&&a(xa),s&&a(us),s&&a(Da),s&&a(qs),s&&a(Ca),s&&a(T),s&&a(Pa),s&&a(A),s&&a(Sa),s&&a(is),s&&a(La),s&&a(O),s&&a(qa),s&&a(ks),s&&a(Ha),s&&a(Hs),s&&a(Ma),s&&a(j),s&&a(Ra),s&&a(Ms),s&&a(Wa),s&&a(fs),s&&a(Ia),s&&a(B),s&&a(ja),s&&a(ds),s&&a(Ba),s&&a(x),s&&a(Ja),s&&a(ys),s&&a(Fa),s&&a(J),s&&a(za),s&&a(ms),s&&a(Na),s&&a(Rs),s&&a(Ya),s&&a(hs),s&&a(ga),s&&a(Ws),s&&a(Ga),s&&a(D),s&&a(Ua),s&&a(vs),s&&a(Ka),s&&a(C),s&&a(Qa),s&&a(ws),s&&a(Va),s&&a(y),s&&a(Xa),s&&a(F),s&&a(Za),s&&a(z),s&&a($a),s&&a(R)}}}const Bl={title:"FP & TS chapter 3: Putting fun in functional operators",cover:"",date:"18-04-2025",category:"webdevelopment",tags:["webdevelopment","FP & TS"],preview:`When you have been developing in TypeScript for a while, you are probably already using the functional operators, even if you don’t realize it. 

The operators , , and  are native JavaScript methods that are used to iterate over
collections without...`,previewHtml:"<p>When you have been developing in TypeScript for a while, you are probably already using the functional operators, even if you don’t realize it. </p> <p>The operators <code>Array.prototype.map</code>, <code>Array.prototype.filter</code>, and <code>Array.prototype.reduce</code> are native JavaScri...</p>"};class Jl extends Ml{constructor(W){super(),Rl(this,W,null,Il,Wl,{})}}export{Jl as default,Bl as metadata};
